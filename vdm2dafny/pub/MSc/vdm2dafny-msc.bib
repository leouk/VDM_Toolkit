@misc{VDMJ,
	author = {Nick Battle},
	title = {{VDMJ Compiler for VDM}},
	year = {2024},
	month = {Feb},
	howpublished = {\url{https://github.com/nickbattle/vdmj}},
}

@misc{VDMJDesignSpec,
	author = {Nick Battle},
	title = {{VDMJ Design Specification}},
	year = {2023},
	month = {Nov},
	howpublished = {\url{https://github.com/nickbattle/vdmj/blob/master/vdmj/documentation/DesignSpec.pdf}},
}

@misc{VDMJPluginWritersGuide,
	author = {Nick Battle},
	title = {{VDMJ Plugin Writers Guide}},
	year = {2023},
	month = {Nov},
	howpublished = {\url{https://github.com/nickbattle/vdmj/blob/master/vdmj/documentation/PluginWritersGuide.pdf}},
}

@inproceedings{VDMJClassMapping,
author = {Battle, Nick},
year = {2017},
month = {Sep},
pages = {},
title = {Analysis Separation without Visitors}
}

@misc{VDMToolkit,
	author = {Leo Freitas},
	title = {{VDM Toolkit}},
	year = {2024},
	howpublished = {\url{https://github.com/leouk/VDM_Toolkit}},
}

@misc{ST4,
	author = {{ANTLR Team}},
	title = {{StringTemplate4: Github Repository}},
	year = {2024},
	howpublished = {\url{https://github.com/antlr/stringtemplate4}},
}

@inproceedings{why3,
  TITLE = {{Why3: Shepherd Your Herd of Provers}},
  AUTHOR = {Bobot, Fran{\c c}ois and Filli{\^a}tre, Jean-Christophe and March{\'e}, Claude and Paskevich, Andrei},
  URL = {https://inria.hal.science/hal-00790310},
  BOOKTITLE = {{Boogie 2011: First International Workshop on Intermediate Verification Languages}},
  ADDRESS = {Wroclaw, Poland},
  PAGES = {53-64},
  YEAR = {2011},
  PDF = {https://inria.hal.science/hal-00790310/file/main.pdf},
  HAL_ID = {hal-00790310},
  HAL_VERSION = {v1},
}

@misc{DfyRef,
	author = {{Dafny-lang Community}},
	title = {Dafny Reference Manual},
	year = {2024},
	howpublished = {\url{https://dafny.org/latest/DafnyRef/DafnyRef}},
}

@inproceedings{VDMLangMan,
  title={{VDM-10 Language Manual}},
  author={Peter Gorm Larsen and Kenneth Guldbrandt Lausdahl and Nick Battle},
  year={2010},
  url={https://raw.githubusercontent.com/overturetool/documentation/editing/documentation/VDM10LangMan/VDM10_lang_man.pdf}
}

@inproceedings{VDMMiniMaxExcerpt,
  title={{VDM-10 Language Manual, pg. 35}},
  author={Peter Gorm Larsen and Kenneth Guldbrandt Lausdahl and Nick Battle},
  year={2022},
  url={https://raw.githubusercontent.com/overturetool/documentation/editing/documentation/VDM10LangMan/VDM10_lang_man.pdf},
}

@inproceedings{VDMJPluginWriters,
  title={{VDMJ LSP Plugin Writer's Guide}},
  author={Nick Battle},
  year={2024},
  url={https://github.com/nickbattle/vdmj/blob/master/lsp/documentation/PluginWritersGuide.pdf}
}

@inproceedings{VDMJUserGuide,
  title={{VDMJ Tool Support: User Guide}},
  author={Nick Battle},
  year={2023},
  month={Dec},
  url={https://github.com/nickbattle/vdmj/blob/master/vdmj/documentation/UserGuide.pdf}
}

@book{ProgramProofs,
	author = {K. Rustan M. Leino},
	title = {{Program Proofs}},
	year = {2023},
    month = {Mar},
    publisher = {{The MIT Press}}
}

@misc{DfyGrammar,
	author = {{Dafny-lang Community}},
	title = {Dafny Reference Manual},
	year = {2024},
	howpublished = {\url{https://dafny.org/latest/DafnyRef/DafnyRef}},
    note = {Chapter 17},
}

@misc{ProgProofsCodeExamples,
	author = {{K. Rustan M. Leino}},
	title = {Program Proofs Code Examples},
	year = {2023},
	howpublished = {\url{https://www.program-proofs.com/code.html}},
}

@misc{DafnyStaticVariables,
	author = {{K. Rustan M. Leino}},
	title = {Can static variables exist in Dafny},
	year = {2019},
	howpublished = {\url{https://stackoverflow.com/a/55032477}},
}

@misc{Boogie,
	author = {{Microsoft RiSE Group}},
	title = {Boogie: An Intermediate Verification Language},
	year = {2008},
	howpublished = {\url{https://www.microsoft.com/en-us/research/project/boogie-an-intermediate-verification-language/}},
}

@misc{DafnyCS,
	author = {{Dafny-lang Community}},
	title = {Integration Dafny with C# Projects},
	year = {2024},
	howpublished = {\url{http://dafny.org/latest/DafnyRef/integration-cs/IntegrationCS}},
}

@misc{DafnyMicrosoft,
	author = {{Microsoft RiSE Group}},
	title = {Dafny: A Language and Program Verifier for Functional Correctness},
	year = {2008},
	howpublished = {\url{https://www.microsoft.com/en-us/research/project/dafny-a-language-and-program-verifier-for-functional-correctness/}},
}

@article{ISOVDMSL,
author = {Nico Plat and Peter Larsen},
year = {1994},
month = {09},
pages = {},
title = {{An overview of the ISO/VDM-SL standard}},
volume = {27},
journal = {ACM SIGPLAN Notices},
doi = {10.1145/142137.142153}
}

@misc{VDM2UML,
author = {Jonas Lund and Lucas Jensen and Nick Battle and Peter Larsen and Hugo Macedo},
year = {2023},
month = {Apr},
pages = {},
title = {{Bidirectional UML Visualisation of VDM Models}}
}

@misc{VDM2ISA,
author = {Leo Freitas},
year = {2023},
month = {Apr},
pages = {},
title = {{Topologically sorting VDM-SL definitions for Isabelle/HOL translation}}
}

@misc{VDMToolSupport,
author = {Peter Gorm Larsen and Kenneth Lausdahl and Peter Tran-Jørgensen and Joey Coleman and Sune Wolff and Luıs Diogo Couto and Victor Bandur},
year = {2019},
month = {May},
pages = {},
title = {{Overture VDM-10 Tool Support: User Guide}},
howpublished = {\url{https://raw.githubusercontent.com/overturetool/documentation/editing/documentation/UserGuideOvertureIDE/OvertureIDEUserGuide.pdf}}
}

@misc{VDMSLOvertureVDMExamplesPage,
author = {Various Authors},
year = {2009},
pages = {},
title = {{Overture Tool: VDMSL Examples}},
howpublished = {\url{https://www.overturetool.org/download/examples/VDMSL/}}
}

@techreport{leino2013co-induction,
author = {Leino, Rustan and Moskal, Michal},
title = {Co-Induction Simply: Automatic Co-Inductive Proofs in a Program Verifier},
year = {2013},
month = {July},
abstract = {Program verification relies heavily on induction, which has received decades of attention in mechanical verification tools. When program correctness is best described by infinite structures, program verification is usefully aided also by co-induction, which has not benefited from the same degree of tool support. Co-induction is complicated to work with in interactive proof assistants and has had no previous support in dedicated program verifiers. This paper shows that an SMT-based program verifier can support reasoning about co-induction—handling infinite data structures, lazy function calls, and user-defined properties defined as greatest fix-points, as well as letting users write co-inductive proofs. Moreover, the support can be packaged to provide a simple user experience. The paper describes the features for co-induction in the language and verifier Dafny, defines their translation into input for a first-order SMT solver, and reports on some encouraging initial experience.},
publisher = {Microsoft Research},
url = {https://www.microsoft.com/en-us/research/publication/co-induction-simply-automatic-co-inductive-proofs-in-a-program-verifier/},
number = {MSR-TR-2013-49},
}

@inproceedings{leino2008specification,
author = {Leino, Rustan},
title = {Specification and Verification of Object-Oriented Software},
booktitle = {Marktoberdorf International Summer School 2008},
year = {2008},
month = {June},
abstract = {The specification of object-oriented and other pointer-based programs must be able to describe the structure of the program’s dynamically allocated data as well as some abstract view of what the code implements. The verification of such programs can be done by generating logical verification conditions from the program and its specifications and then analyzing the verification conditions by a mechanical theorem prover.

In these lecture notes, I present an object-based language, Dafny, whose specifications use the style of dynamic frames. I show how to write and specify programs in Dafny. Most of the material is devoted to how to build a first-order automatic program verifier for Dafny programs, generating the verification conditions as input to an automatic satisfiability-modulo-theories solver.},
url = {https://www.microsoft.com/en-us/research/publication/specification-verification-object-oriented-software/},
edition = {Marktoberdorf International Summer School 2008},
}

@inproceedings{Fillitre2013Why3W,
  title={{Why3 - Where Programs Meet Provers}},
  author={Jean-Christophe Filli{\^a}tre and Andrei Paskevich},
  booktitle={European Symposium on Programming},
  year={2013},
  url={https://api.semanticscholar.org/CorpusID:14572425}
}