module Nim2
imports from IO		 operations  println	renamed println;
															--printf  renamed printf;
															print		renamed print
exports all
definitions 

values

MAX_PILE: nat1 = 20;
MAX_MOV: nat1 = 3;

types 

-- leave fair play out of game types for simplicity; 
-- include it in the game play algorithm instead
Player = <P1> | <P2> ;

-- TODO: should this be nat? for the case when the game finishes?
Pile = nat1
inv p == p <= MAX_PILE;

Move = nat1
inv p == p <= MAX_MOV;

Moves = seq of Move
inv s == 
	-- you can never move beyond what's in the pile
	sum_elems(s) <= MAX_PILE
	and
	-- last move is always 1, when moves are present, at the end of the game
	(sum_elems(s) = MAX_PILE => s(len s) = 1)
	;

functions 

sum_elems: seq of Move -> nat
sum_elems(s) == 
	cases s:
		[]     -> 0,
		[x]^xs -> x + sum_elems(xs)
	end
post
 	-- if someone played, then sum is not zero
	s <> [] <=> RESULT > 0
measure 
  len s;

who_plays_next: Moves -> Player
who_plays_next(ms) == 
	if len ms mod 2 = 0 then <P1> else <P2>
;

fair_play: Player * Moves -> bool
fair_play(p, ms) == p = who_plays_next(ms);

moves_left: Moves -> nat
moves_left(ms) == MAX_PILE - sum_elems(ms);

play_move: Player * Move * Moves -> Moves
play_move(p, m, s) == s ^ [m]
pre 
	-- DISCUSS
	-- what's left is within what's to be played
	m <= moves_left(s) 
	--and
	-- cannot play to loose
	--m < moves_left(s)
	and
	moves_left(s) > 0
	and
	-- encodes fairness: if even no moves, then it must be <P1>'s turn
	fair_play(p, s)
	--p = who_plays_next(s)
	-- p = <P1> <=> len s mod 2 = 0
	-- p = <P2> <=> len s mod 2 <> 0?
post 
	-- you play something = implicitly true by the inv of Move
	sum_elems(s) < sum_elems(RESULT)
	and
	sum_elems(s) + m = sum_elems(RESULT) 
	and 
	not fair_play(p, RESULT)
;

-- DISCUSS
last_play: Player * Moves -> Moves
last_play(p, ms) == ms ^ [1]
pre sum_elems(ms) = MAX_PILE - 1
		and
		fair_play(p, ms)
		;
		
-- invariant for whoever won 
who_won_invariant: Moves -> bool 
who_won_invariant(moves) ==
	is not yet specified
; 

inds_of: Moves * Player -> set of nat1
inds_of(ms, p) == 
	if (p = <P1>) then 
		{ i | i in set inds ms & i mod 2 <> 0 }
	else
		{ i | i in set inds ms & i mod 2 = 0 };

moves_of: Moves * Player -> seq of Move
moves_of(ms, p) == 
	[ ms(i) | i in set inds_of(ms, p) ]
--	if (p = <P1>) then
--		[ ms(i) | i in set inds ms & i mod 2 = 0 ]--
--	else
--		[ ms(i) | i in set inds ms & i mod 2 <> 0 ]			
;

--moves_of3: Moves3 * Player -> seq of Move
--moves_of3(ms, p) == ms(p);


state Nim of
	--TODO: needed? pile: Pile
	limit: Move
	current: Player
	moves: Moves
inv mk_Nim(--pile, 
					limit, current, moves) ==
	-- cannot move all at once
	limit < MAX_PILE
	and
	-- fair play
	fair_play(current, moves)
init nim == nim = mk_Nim(MAX_MOV, <P1>, [])
end 

operations 

-- flips who is playing - as extended explicit operation
--flip_player: Nim ==> Nim
flip_player() == 
	current := if (current = <P1>) then <P2> else <P1>
ext wr current
		rd moves
pre 
  moves_left(moves) > 0
post 
  current <> current~;

flip_player2: () ==> () 
flip_player2() == 
	current := if (current = <P1>) then <P2> else <P1>
pre 
  moves_left(moves) > 0
post 
  current <> current~
  --and
  --moves = moves~ and limit = limit~
  ;


-- who won is determined by who played more moves
who_won() w: Player ==
	is not yet specified
ext rd current, moves
pre true
post (who_won_invariant(moves) and w = current)
;

tally() ==
	 (print("Player P");print(who_won());println(" won. Play finished with:");
	  print("\tP1 moves = ");println(moves_of(moves, <P1>));
	  print("\tP2 moves = ");println(moves_of(moves, <P2>));
	 )
ext rd current, moves;	

choose_moveI() r: Move
ext rd limit, moves
post 
	r <= limit
	and
	not r in set elems moves;

choose_moveE: () ==> Move
choose_moveE() == 
	let m in set {1,...,limit} in return m
post 
	RESULT <= limit
	and
	not RESULT in set elems moves;

choose_moveEE() r: Move == 
	let m in set {1,...,limit} in return m
ext 
	rd current, limit, moves
post 
	--limit~ = limit and moves~ = moves and current~ = current
	--and
	r <= limit
	--and
	--not r in set elems moves
	and
	pre_play_move(current, r, moves)
	;

--save: Move ==> ()
--save(m) == 
save(m : Move) == 
	moves := play_move(current, m, moves)	  
ext rd current wr moves
pre 
	pre_play_move(current, m, moves)
post 
  post_play_move(current, m, moves~, moves)
;

play_game() ==
	((while moves_left(moves) > 1 do
		(dcl whop   : seq1 of char := (if (current = <P1>) then "P1" else "P2"),
			 choice : Move 		   := choose_moveEE();
				save(choice);  
				print("Player " ^ whop ^ " removed: ");println(choice);
				flip_player();
		)
	 );
	 tally()
	)
ext wr current, moves
post moves_left(moves) = 0;


values															  --20
	M1: Moves = play_move(<P1>, 3, []);--17		19 mod 4 = 3
	M2: Moves = play_move(<P2>, 2, M1);--15
	M3: Moves = play_move(<P1>, 2, M2);--13		14 mod 4 = 2
	M4: Moves = play_move(<P2>, 3, M3);--10
	M5: Moves = play_move(<P1>, 1, M4);--09		09 mod 4 = 1
	M6: Moves = play_move(<P2>, 1, M5);--08
	M7: Moves = play_move(<P1>, 3, M6);--05		07 mod 4 = 3
	M8: Moves = play_move(<P2>, 2, M7);--03		
	M9: Moves = play_move(<P1>, 2, M8);--01		02 mod 4 = 2 
	M10:Moves = play_move(<P2>, 1, M9);--00

end Nim2

/* PLAY script
default Nim2
print M1
print M2
print M3
print M4
print M5
print M6
print M7
print M8
print M9
print M10
*/
