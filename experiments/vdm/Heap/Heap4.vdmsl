-- $Id$
module Heap4
imports 
		from Heap1 functions locs_of renamed Heap1locs_of;
		   		types Piece renamed Heap0Piece;,
		from Heap3 types Loc   renamed Heap3Loc; 
						 Piece renamed Heap3Piece;
						 Free3 renamed Heap3Free3;
						 Store renamed Heap3Store;
				   functions isOk3		  renamed Heap3isOk3;
							 isReachable3 renamed Heap3isReachable3;
							 locs3		  renamed Heap3locs3;
exports all
definitions 

types 
	Loc = Heap3Loc;
	Piece = Heap3Piece;
 	Store = Heap3Store;
	Free3 = Heap3Free3;

values 
functions 
	min: set1 of int -> int
	min(s) == 
		(iota m in set s & (forall n in set s & m <= n))
	post
		forall x in set s & RESULT <= x;
	
	remove4: [Loc] * [Loc] * Store * nat1 -> (Store * Piece)
	remove4(prev, curr, store, n) ==
		if (store(curr) < n) or (store(curr) = n + 1) then
			remove4(curr, store(curr+1), store, n)
		else
			let store1 = (if store(curr) = n then
							if prev = nil then
								store
							else
								store ++ { prev+1 |-> store(curr+1) }
						 else
							store ++ { curr |-> store(curr)-n }) in 
				mk_(store1, mk_Heap0Piece(curr + store(curr)-n, n))
		measure card dom store;

	insert4: [Loc] * [Loc] * Store * Loc * nat1 -> Store
	insert4(prev, curr, store, a, s) == 
		if curr <> nil and a > curr then
			insert4(curr, store(curr+1), store, a, s)
		else
			let store1 = store ++ { a |-> s, a+1 |-> curr } in
				let store2 = if prev = nil then
								store1
							 else
								store1 ++ { prev + 1 |-> a } in
					let store3 = if curr = nil or a+s < curr then
									store2
								 else
									({curr, curr+1} <-: store2) ++	
										{   a |-> s + store2(curr),
										  a+1 |-> store2(curr+1) } in
						let store4 = if prev = nil or prev + store(prev) < a then
										store3
									 else
										({a, a+1} <-: store3) ++ 
											{  prev |-> store3(prev) + store3(a),
											   prev+1 |-> store3(a+1) } in
							store4
		pre s > 1 and
			(prev = nil or curr = nil or prev < curr) and
			Heap3isOk3(prev, store) and
			Heap3isOk3(curr, store)
		measure card dom store;

state StateName of
	free4: Free3
end 

operations 
	NEW4(req: nat) res: Piece
		ext wr free4
		pre req > 1 and
			let mk_(start, store) = free4 in
				exists a in set dom store & 
					(store(a) <> nil and
					 (store(a) = req or store(a) - req > 1) and
					 Heap3isReachable3(a, start, store))
		post let mk_(startA, storeA) = free4 in
				let mk_(startB, storeB) = free4~ in	
					startA = (if storeA(startB) = req then
								storeA(startB + 1) 
							  else
								startB) and
					mk_(storeA, res) = remove4(nil, startB, storeB, req);

	DISPOSE4(ret: Piece)
		ext wr free4
		pre ret.SIZE > 1 and
			let mk_(start, store) = free4 in 
				Heap1locs_of(ret) inter Heap3locs3(start, store) = {}
		post let mk_Heap0Piece(a, s) = ret in
				let mk_(startA, storeA) = free4 in
					let mk_(startB, storeB) = free4~ in
						startA = (if startB = nil then
									a
								 else
									min({startB, a})) and
						storeA = insert4(nil, startB, storeB, a, s);

end Heap4