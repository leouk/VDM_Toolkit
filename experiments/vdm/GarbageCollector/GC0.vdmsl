module GC0
exports 
	types
		struct Sigma0;
		struct Addr;
		
	values
		MAX_ADDR: nat;
		ALL_ADDR: set of Addr;
	
	functions
		hat: set of Addr -> set of set of Addr;
		garbage0: set of Addr * set of Addr -> set of Addr;
			
	operations
		Collector0 : () ==> ();
		Mutator0   : () ==> ();
		
definitions 

state StateSigma0 of
	busy: set of Addr
	free: set of Addr
inv mk_StateSigma0(busy, free) == busy inter free = {}
init gc0 == gc0 = mk_StateSigma0({}, ALL_ADDR)
end 

types 
	Addr = nat
	inv a == a <= MAX_ADDR;

	-- annoying repetition needed for the import of Sigma0 for retr0
	Sigma0 ::
		busy: set of Addr
		free: set of Addr
	inv mk_Sigma0(busy, free) == busy inter free = {};

values 
	MAX_ADDR: nat = 3;
	ALL_ADDR: set of Addr = {0,...,MAX_ADDR};

functions 
	hat: set of Addr -> set of set of Addr
	hat(s) == power s;
	
	garbage0: set of Addr * set of Addr -> set of Addr
	garbage0(b, f) == ALL_ADDR \ (b union f);
--%\begin{fn}{garbage}{busy, free}
--%\signature{\setof{Addr} \x \setof{Addr} \to \setof{Addr}}
--% Addr \minus (busy \union free)
--% \end{fn}
--%
--%Since $garbage$ is a complement of $busy$ and $free$ sets, it is disjoint from both;
--%thus together the three sets partition the address space $Addr$.%
--%\footnote{We did consider (but rejected) making this partition explicit as one might in Z.}
	
operations 

-- NOTE: we explicitly used variables in rely/guar that overture doesn't allow in code because of ext rd!
--		   that is, in Collector0 post, only busy is available (and not busy~), given ext rd busy! Confusing for Isabelle.
--			 Thus, we will use the Z style notation here and in Isabelle to avoid problems. 
--			 I repeat intended pre/post in comments also making explicit type invariants 

Collector0() == 
	free := free union (ALL_ADDR \ (busy union free)) 
ext wr free
		rd busy
pre true
post (ALL_ADDR \ busy) subset dunion hat(free~)

--pre  inv_Sigma0
--rely inv_Sigma0 and (busy' \ busy) subset free and free' subset free
--guar inv_Sigma0 and free subset free' and busy' = busy
--post inv_Sigma0 and (ALL_ADDR \ busy) subset dunion hat(free) 
;
	
Mutator0() ==
	return
ext wr busy
		wr free
pre true
post true
--pre  inv_Sigma0
--rely inv_Sigma0 and busy' = busy and free subset free'
--guar inv_Sigma0 and (busy' \ busy) subset free and free' subset free
--post inv_Sigma0

--------------------------------------------------------
-- Rigorous proof sketches
--------------------------------------------------------

-- theorem (Commutativity of rely-guar): 
-- guar-Collector0 => rely-Mutator0 => guar-Mutator0 => rely-Collector0
-- =[expand]
-- 1.guar-Collector0 => rely-Mutator0 => inv_Sigma0 and (busy' \ busy) subset free and free' subset free => inv_Sigma0 and (busy' \ busy) subset free and free' subset free
-- =[assumption]
-- No subgoals!

-- theorem (Commutativity of rely-guar): 
-- guar-Mutator0 => rely-Collector0 => guar-Collector0 => rely-Mutator0
-- =[expand]
-- 1.guar-Mutator0 => rely-Collector0 => inv_Sigma0 and free subset free' => inv_Sigma0 and busy' = busy and free subset free'
-- =[conjI, assumption]
-- 1.guar-Mutator0 => rely-Collector0 => inv_Sigma0 and free subset free' => busy' = busy
-- =[frame condition on ext rd busy for collector guarantee]
-- No subgoals!


end GC0