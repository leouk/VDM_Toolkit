module RecursiveVDM
exports all
definitions 
functions

   factorial: nat -> nat 
   factorial(n) == if n = 0 then 1 else n * factorial(n - 1) measure n;   

   -- For the measure below, VDMJ produces a measure function as: 
   -- measure_factorial: nat -> nat 
   -- measure_factorial(n) == n
   
   --@LF attempt at getting PVS's ackerman measure, but they use Cantor's normal form for ordinals!
   --  add: nat * nat * seq of nat -> (seq of nat )
   --  add(x, n, s) == [ s(i) | i in set {1,...,n}];

   -- ackmeasure: nat * nat -> nat 
   -- ackmeasure(m,n) ==
   --      (if m = 0 then 
   --          0 
   --       else if n = 0 then 
   --          len add(m, len add(1, 0, []), [])
   --      else 
   --          len add(m, len add(1, 0, []), add(n, 0, []))
   --      );

    ack: nat * nat -> nat 
    ack(m,n) ==
        --@Printf("ack(%1s, %2s): +=%3s, *=%4s, *'=%5s, £=%6s, $=%7s\n", 
        --          m, n, m+n, m*10+n, (m+2)*10-(n+1),
        --          if m = 0 then n else if n = 0 then m else m + n,
        --          if m >= n then (if n = 0 then m else n) else m)
        (if m = 0 then
            n+1
        else if n = 0 then
            --@Printf("\tack(%1s, %2s): n=0\n", m-1, 1)
            ack(m-1, 1)
        else 
            --@Printf("\tack(%1s, %2s): deep\n", m-1, ack(m, (n-1)))
            ack(m-1, ack(m, (n-1)))
        )
    measure 
        --@IsaMeasure( pair_less_VDMNat )
        --@doc where pair_less_VDMNat = lex_prod(less_than_VDMNat, less_than_VDMNat)
        --           less_than_VDMNat = transitive_closure({(z', z) | z' : int, z: int . 0 <= z' ∧ z' < z})
        --           lex_prod(ra,rb)  = { ((a,b), (a', b')) | a, b, 'a, b': int & (a,a') in set ra or a = a' and (b,b') in set rb}
        --ackmeasure(m, n) 
        --@doc thanks to Tomo's observation that ack does use lexicographic tuples! 
        -- 	   Wow. see also "print measure_ack" to see that result type is "nat * nat -> (nat * nat)"!
        --
        --	   but then, you can't call 
        mk_(m, n)--is not yet specified 
    ;
    
	--@doc this one fixes the issue above but then makes calls awkward
    ack': (nat * nat) -> nat 
    ack'(mk_(m,n)) ==
        (if m = 0 then
            n+1
        else if n = 0 then
            ack'(mk_(m-1, 1))
        else 
            ack'(mk_(m-1, ack'(mk_(m, (n-1)))))
        )
    measure 
        mk_(m, n)--is not yet specified 
    ;

    pair_less_VDMNat: () -> set of ((nat * nat) * (nat * nat))
    pair_less_VDMNat() == lex_prod[nat, nat](less_than_VDMNat(), less_than_VDMNat());

    less_than_VDMNat: () -> set of (nat * nat)
    less_than_VDMNat() == transitive_closure[nat]({ mk_(z', z) | z', z : nat & z' < z });

    lex_prod[@A,@B]: set of (@A * @A) * set of (@B * @B) -> set of ((@A * @B) * (@A * @B))
    lex_prod(ra,rb) == 
        { mk_(mk_(a, b), mk_(a', b')) | a, a': @A, b, b': @B & 
            mk_(a,a') in set ra or a = a' and mk_(b, b') in set rb };

    transitive_closure[@X]: set of (@X*@X) -> set of (@X*@X)
    transitive_closure(R) == 
        let closed_R: set of set of (@X*@X) = { Q | Q in set power R & R subset Q and rel_comp[@X,@X,@X](Q,Q) subset Q } in
            if closed_R = {} then {} else dinter closed_R;

    --@doc First projection on the set of pairs (i.e like VDM's "dom R") 
	rel_dom[@X,@Y]: set of (@X*@Y) -> set of @X
	rel_dom(R) == { x.#1 | x in set R }
	post
		forall mk_(x,-) in set R & x in set RESULT;
	
	--@doc Second projection on the set of pairs (i.e like VDM's "rng R") 
	rel_rng[@X,@Y]: set of (@X*@Y) -> set of @Y
	rel_rng(R) == { x.#2 | x in set R }
	post
		forall mk_(-,y) in set R & y in set RESULT;
	
	--@doc Forward relational composition (i.e like sequential composition Q ;; R) 
	rel_comp[@X,@Y,@Z]: set of (@X*@Y) * set of (@Y*@Z) -> set of (@X*@Z)
	rel_comp(Q, R) == 
		--@doc very slow for large relations without the let; thanks @NB!
		let 
			Qdom: set of @X = rel_dom[@X,@Y](Q),
			Qrng: set of @Y = rel_rng[@X,@Y](Q),
			Rdom: set of @Y = rel_dom[@Y,@Z](R),
			Rrng: set of @Z = rel_rng[@Y,@Z](R),
			QrRd: set of @Y = Qrng union Rdom
		 in
			{ mk_(x, z) | x in set Qdom, z in set Rrng & 
						(exists y in set QrRd & 
								mk_(x,y) in set Q and mk_(y, z) in set R) }
	post
		--@doc composition result projections is at most the same, or is smaller
		rel_dom[@X,@Z](RESULT) subset rel_dom[@X,@Y](Q)
		and
		rel_rng[@X,@Z](RESULT) subset rel_rng[@Y,@Z](R);

    --@doc see https://www21.in.tum.de/~krauss/papers/scnp-wst.pdf
   perm: int * int * int -> int --nat
   perm(m,n,r) == 
        --@Printf("perm(%1s, %2s, %3s)\n", m, n, r)
        if 0 < r then 
            perm(m, r-1, n) 
        else if 0 < n then 
            perm(r, n-1, m)
        else --if 0 <= m then 
            m
        --else 
            --0
    pre 
        -- possibly could be more lenient like if not 0 < r and not 0 < n then true else m+n+r > 0
        ((0 < r or 0 < n) => m+n+r > 0)
    measure
        maxs({m+n+r, 0})   
        --mk_(n, r)
        --mk_(m, n, r)  
        ;

    maxs: set1 of int -> int
	maxs(s) == 
		(iota m in set s & (forall n in set s & n <= m))
	post
		forall x in set s & x <= RESULT;

	mins: set1 of int -> int
	mins(s) == 
		(iota m in set s & (forall n in set s & m <= n))
	post
		forall x in set s & RESULT <= x;

    --@doc Takeuchi's function (from HOL/Examples/Functions.thy)
    tak: int * int * int -> int
    tak(x,y,z) == 
        --@Printf("tak(%1s, %2s, %3s)\n", x, y, z)
        if x <= y then
            y
        else    
            tak(tak(x-1,y,z), tak(y-1,z,x), tak(z-1,x,y))
    measure
       is not yet specified
    --    (if x <= y then y else if y <= z then z else x)
        -- if x <= y then 
        --     0 
        -- else if y <= z then 
        --     maxs({x,y,z}) - mins({x,y,z})
        -- else 
        --     x - mins({x,y,z})
       -- mk_(x, y, z)
    ;  
    

values 
    NAT_MAX: nat1 = 2;
    NAT_SET: set of nat = {0,...,NAT_MAX-1};
    NAT_REL: set of (nat * nat) = { mk_(x,y) | x in set NAT_SET, y in set NAT_SET };
    --NAT_REL_FIN_SUB: set of ((set of ((nat * nat)) * set of ((nat * nat)))) = { mk_(A, B) | A in set power NAT_REL, B in set power NAT_REL /*& A psubset B */}
functions
    nat_term: () -> set of (nat * nat)
    nat_term() == 
        { mk_(m, n) | n in set NAT_SET, m in set NAT_SET & n = m+1 and n < NAT_MAX };

    nat_fin_psub: () -> set of ((set of ((nat * nat)) * set of ((nat * nat))))
    nat_fin_psub() == 
        { mk_(A, B) | 
            A in set power nat_term()/*NAT_REL*/, 
            B in set power nat_term()/*NAT_REL*/ & 
            A psubset B /*finite B and B subset nat_term()*/ }
    post 
        forall mk_(A,B) in set RESULT & A psubset B and B subset nat_term();
   
    lex_prod'[@A,@B]: set of (@A * @A) * set of (@B * @B) * set of (@A * @A) * set of (@B * @B) -> set of ((@A * @B) * (@A * @B))
    lex_prod'(ra,rb, rabound, rbbound) == 
        { mk_(mk_(a, b), mk_(a', b')) | mk_(a,a') in set ra, mk_(b,b') in set rbbound }
        union
        { mk_(mk_(a, b), mk_(a', b')) | mk_(a,a') in set rabound, mk_(b, b') in set rb & a = a'};

    lex_prod_nat: (set of ((set of ((nat * nat)) * set of ((nat * nat))))) * (set of (nat * nat)) -> 
                  set of (((set of (nat * nat)) * nat) * ((set of (nat * nat)) * nat)) 
    lex_prod_nat(ra, rb) == lex_prod'[set of (nat * nat), nat](ra, rb, nat_fin_psub(), NAT_REL);--power ra, power rb);
    
    --@IsaMutualRec({odd})
    even: nat -> bool
    even(n) == 
    	--@Printf("even(%1s)\n", n)
    	if n = 0 then true else odd(n-1)
    measure n;
    
    --@IsaMutualRec({even})
    odd: nat -> bool
    odd(n) == 
    	--@Printf("odd(%1s)\n", n)
    	if n = 0 then false else even(n-1)
    measure n;
    
    
    --@doc accumulating parameter
    sct1_rev: seq of nat * seq of nat -> seq of nat 
    sct1_rev(ls, a) == if ls = [] then a else sct1_rev(tl ls, [hd ls] ^ a)
    measure len ls;

	--@doc indirect recursion
    sct2_f: seq of nat * seq of nat -> seq of nat 
    sct2_f(i, x) == if i = [] then x else sct2_g(tl i, x, i)
    measure len i;

    sct2_g: seq of nat * seq of nat * seq of nat -> seq of nat 
    sct2_g(a, b, c) == sct2_f(a, b ^ c)
    measure len a;--measure_sect2_f(a, b ^ c);
    
    --@doc Ackermann's lexicographic ordered params
    sct3_a: nat * nat -> nat 
    sct3_a(m,n) == if m = 0 then n+1 else if n = 0 then sct3_a(m-1, 1) else sct3_a(m-1, sct3_a(m, n-1))
    measure is not yet specified;
    
    --@doc permuted parameters
    sct4_p: nat * nat * nat -> nat 
    sct4_p(m,n,r) == if r > 0 then sct4_p(m, r-1, n) else if n > 0 then sct4_p(r, n-1, m) else m
    measure maxs({m+n+r, 0});
    
    --@doc permuted and possibly discarded parameter
    sct5_f: seq of nat * seq of nat -> seq of nat
   	sct5_f(x,y) == 
    	--@Printf("sct5_f(%1s,%2s)\n", x, y)
    	(if y = [] then x else if x = [] then sct5_f(y, tl y) else sct5_f(y, tl x))
    measure 
    	--if x = [] then len y else len x						-- fails on sct5_f([],[2])
    	--if y = [] then 0 else if x = [] then len y else len x -- fails on sct5_f([1,2],[1,2])
      	--if y = [] then 0 else if x = [] then len y else len x + len y -- fails on sct5_f([],[1,2])
      	is not yet specified
    	;
     --y = [] => 0
     --y <>[] and x = [] => len y 
     --y <>[] and x <>[] => len x
    
    
    --@doc late-starting sequence of descending parameters
    sct6_f: seq of nat * seq of nat -> seq of nat 
    sct6_f(a,b) == 
    	--@Printf("sct6_f(%1s,%2s)\n", a, b)
    	if b = [] then sct6_g(a, []) else sct6_f([hd b] ^ a, tl b)
    measure len b;
    
    sct6_g: seq of nat * seq of nat -> seq of nat
    sct6_g(c,d) == 
	   	--@Printf("sct6_g(%1s,%2s)\n", c, d)
    	if c = [] then d else sct6_g(tl c, [hd c] ^ d)
    measure len c;
    
traces 
	t1: sct1_rev([1,2,3],[]) ;   
	t2: sct2_f([1,2,3],[])   ;
	t3: sct3_a(2, 2);
	t4: sct4_p(3,2,1);
	
end RecursiveVDM