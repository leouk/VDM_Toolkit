module Expr
exports all
definitions
-- functions 
--     f[@elem]: set of @elem -> nat 
--     f(s) == card s;

--     g[@elem]: seq of @elem -> nat 
--     g(s) == len s;

values
    v00 = cases v2: 0 -> 1, 1 -> 2, 2 -> 3, others -> 4 end;
    v01 = cases v1: mk_(mk_(x,y), mk_(y,z)), mk_(x, y, z) -> x+y+z end;
    v1 = mk_(mk_(1,2), mk_(1,2));
    --v11 = v1.#1.#1;
    --v12 = (v1.#1).#1;
    -- v4 = [f, g];
    -- v5 = v4(1)[nat]({1,2,3});
    v2 = 1+2*3**4;
    v3 = (1+2)*3**4;
    v6 = 2**3**2;--right associative **!
    v7 = -3 + floor 3.5 + 3; 
end Expr