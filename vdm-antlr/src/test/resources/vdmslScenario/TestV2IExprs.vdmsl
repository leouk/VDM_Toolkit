module TestV2IExprs
exports all
definitions
values
-- Explicitly typed values
	t1 : bool = true;				  	--TCBooleanType,TCBooleanLiteralExpression
	t2 : char = 'a';					--TCCharacterType,TCCharLiteralExpression
	t3 : seq of char = "just text"; 	--TCStringLiteralExpression; string literals can be VDMChar VDMSeq for Isabelle string type 
	t4 : int  = 10;					--TCIntegerType, TCIntegerLiteralExpression
	t5 : nat  = 10;					--TCNaturalType
	t6 : nat1 = 20;					--TCNaturalOneType
	t7 : real = 4.5;					--TCRealType,TCRealLiteralExpression
	t8 : rat = 4.5;					--TCRationalType
	 
	t10: seq1 of nat1 = [1,2,3];					--TCSeqType, TCSeq1Type
	t11: set1 of nat1 = {1,...,5};				--TCSet1Type
	t12: set of set of nat1 = {{1,2},{2,4}};
	t13: seq of seq of nat1 = [[1,2],[3,4]];
	t14: map nat1 to nat1 = {1 |-> 1, 2 |-> 3};	--TCMapType
	t15: map nat1 to nat1 = {3 |-> 1};
	
-- Implicitly typed values	
	v1 = abs 10;					--TCAbsoluteExpression	
	v2 = floor 5;					--TCFloorExpression 		
	v3 = floor 4.5;
	v4 = -4; 						--TCUnaryMinusExpression
	v5 = +5;						--TCUnaryPlusExpression	
	v6 = card t9;					--TCCardinalityExpression
	t9 : set1 of nat1 = {1,2,3};					--TCSetType
	v7 = power {1,2};				--TCPowerSetExpression
	v8 = dunion t12;				--TCDistUnionExpression	
	v9 = dinter t12;				--TCDistIntersectExpression
	v10= len t10;					--TCLenExpression
	v11= hd t10;						--TCHeadExpression
	v12= tl t10;						--TCTailExpression
	v13= inds t10;					--TCIndicesExpression
	v14= elems t10;					--TCElementsExpression 
	v15= conc t13;					--TCDistConcatExpression
	v16= reverse t10;				--TCReverseExpression
	v17= t10 ^ t10;					--TCSeqConcatExpression		
	v18= t10(2,...,3);				--TCSubseqExpression
	v19= merge {t14,t15};				--TCDistMergeExpression
	v20= dom t14;					--TCMapDomainExpression
	v21= rng t14;					--TCMapRangeExpression
	v22= inverse t14;				--TCMapInverseExpression
	v23= 4+3;						--TCPlusExpression		
	v24= 4-2;						--TCSubtractExpression	
	v25= 4*2;						--TCTimesExpression		
	v26= 4 div 2;					--TCDivExpression			
	v27= 4 / 2;						--TCDivideExpression		
	v28= 4 mod 3;					--TCModExpression			
	v29= 4 rem 3;					--TCRemExpression			
	v30= 2 ** 3;					--TCStarStarExpression	
	v31= 3 = 3;						--TCEqualsExpression		
	v32= 3 <> 4;					--TCNotEqualExpression	
	v33= 4 <= 5;					--TCLessEqualExpression	
	v34= 4 < 5;						--TCLessExpression		
	v35= 5 >= 4;					--TCGreaterEqualExpression
	v36= 5 > 4;						--TCGreaterExpression		
	v39= t14++t15;					--TCPlusPlusExpression	
	v40= t9 <: t14;					--TCDomainResByExpression	
	v41= t9 <-: t14;					--TCDomainResToExpression	
	v42= t14 :> t9;					--TCRangeResByExpression	
	v43= t14 :-> t9;					--TCRangeResToExpression	
	v44= t14 munion t15;				--TCMapUnionExpression	
	v45= t14 comp t15;				--TCCompExpression			
	v46= not t1;						--TCNotExpression
	v47= t1 and t1;					--TCAndExpression
	v48= t1 or t1;					--TCOrExpression
	v49= t1 => t1;					--TCImpliesExpression
	v50= t1 <=> t1;					--TCEquivalentExpression
	v51= 1 in set t9;					--TCInSetExpression		
	v52= 5 not in set t9;				--TCNotInSetExpression	
	v53: set of nat = t9 union t11;				--TCSetUnionExpression	
	v54: set of nat = t9 inter t11;				--TCSetIntersectExpression
	v55: set of nat = t9 \ t11;					--TCSetDifferenceExpression
	v56= t9 subset t11;				--TCSubsetExpression		
	v57= t9 psubset t11;				--TCProperSubsetExpression	
	v58= {1,...,3};					--TCSetRangeExpression	
	v65= {};						--TCSetEnumExpression for empty set
	v66= [];						--TCSeqEnumExpression for empty seq 
	v59= {1,2,3,4};					--TCSetEnumExpression		
	v60= [1,3,4];					--TCSeqEnumExpression		
	v61= {1 |-> 2, 2|->3};			--TCMapEnumExpression,TCMapletExpressionList,TCMapletExpression	
	v62= mk_(1,2);					--TCTupleExpression		
	v63= mk_(1,2,3);
	v64= mk_(1,2,3,4);					
	-- v65= mk_(1,2,3,4).#3;	
	-- v68= v64.#1;               --TCFieldNumberExpression 
	-- v69= v64.#2;
	-- v70= v64.#3;
	-- v71= v64.#4;
	--v72= not yet specified;	--TCNotYetSpecifiedExpression
	v72= narrow_(4.0, nat1);	--TCNarrowExpression
	v721=narrow_(4.0, int);
	v722=let r: real = 4.0 in narrow_(r, nat1);
	v723=narrow_(6 / 2, nat1);
	v73= (iota var in set t9 & var < 2); --TCIotaExpression
	v74= (lambda var : nat, var2: nat1 & var + var2); --TCLambdaExpression + TCMultipleTypeBind
	v741= (lambda var : nat, var2: nat1, var3: real & var + var2 + var3); --TCLambdaExpression + TCMultipleTypeBind
	v75= (exists1 var in set t9 & var < 2); -- TCExists1Expression
	v76= (exists var in set t9 & var < 2); -- TCExistsExpression
	v78= (forall var in set t9 & var <= 3); -- TCForallExpression
	v79= (let var : nat = 10, var2: nat1 = 20 in var + var2);	-- TCLetDefExpression
	v80= (let x, y in set t9 be st x > 2 and y < x in x + y); --TCLetBeStExpression
	v81= { var | var in set t9 & var > 1 }; -- TCSetCompExpression
	v82= { var+var2 | var in set t9, var2 in seq t10 & var > var2 }; -- TCSetCompExpression
	v83= [ var | var in set t9 & var > 1 ]; -- TCSeqCompExpression
	v84= [ var | var in seq t10 & var > 1 ]; -- TCSeqCompExpression
	--VDM not happy with v84-85, Isabelle would allow them
	--v85= [ mk_(var, var2) | var in set s1, var2 in seq t10 & var > var2 ];
	--v86= [ var | var in seq [1,2,3,7,8,9], var2 in seq [4,5,6] & var > var2];
	v88= [ var | var in seq [1,2,3,7,8,9] & (var > 4)];
	v89= if v1 > v2 then v1 else v2;					--TCIfExpression
	v90= if v1 > v2 then v1 else if v1 < v2 then v2 else 0; --TCElseIfListExpression
	--v91= (let f: nat * nat -> nat f(var,var2) == var + var2 in f(10,20)); --TCFiendishLambdaExpression :-)
	v92= (def var : nat = 10 in var+var); --TCDefExpression
    -- v00 = mk_(mk_(1,2), mk_(1,2));
	v01 = cases v2: 0 -> 1, 1 -> 2, 2 -> 3, others -> 4 end;
    -- v02 = cases v00: mk_(mk_(x,y), mk_(y,z)), mk_(x, y, z) -> x+y+z end;

	
end TestV2IExprs