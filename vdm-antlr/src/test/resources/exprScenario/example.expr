true,
false,
1+2*3,
3**4*5,
true,  
'a',
"just text", 
10,
10,
20,
4.5,
4.5,
[],
[1,2,3],
{},
{1,...,5},
[[1,2],[3,4]],
{1 |-> 1, 2 |-> 3},
abs 10,
floor 5,
floor 4.5,
-4, 
+5,
card t9,
{1,2,3},
dunion t12,
dinter t12,
len t10,
hd t10,
tl t10,
inds t10,
elems t10,
conc t13,
reverse t10,
t10 ^ t10,
t10(2,...,3),
merge {t14,t15},
dom t14,
rng t14,
inverse t14,
4+3,
4-2,
4*2,
4 div 2,
4 / 2,
4 mod 3,
4 rem 3,
2 ** 3,
3 = 3,
3 <> 4,
4 <= 5,
4 < 5,
5 >= 4,
5 > 4,
t14++t15,
t9 <: t14,
t9 <-: t14,
t14 :> t9,
t14 :-> t9,
t14 munion t15,
t14 comp t15,
not t1,
t1 and t1,
t1 or t1,
t1 => t1,
t1 <=> t1,
1 in set t9,
5 not in set t9,
t9 union t11,
t9 inter t11,
t9 \ t11,
t9 subset t11,
t9 psubset t11,
{1,...,3},
{1,2,3,4},
[1,3,4],
{1 |-> 2, 2|->3},
mk_(1,2),
mk_(1,2,3),
mk_(1,2,3,4),
narrow_(4.0, nat1),
narrow_(4.0, int),
let r: real = 4.0 in narrow_(r, nat1),
narrow_(6 / 2, nat1),
(iota var in set t9 & var < 2), 
(lambda var : nat, var2: nat1 & var + var2),
(lambda var : nat, var2: nat1, var3: real & var + var2 + var3),
(exists1 var in set t9 & var < 2), 
(exists var in set t9 & var < 2), 
(forall var in set t9 & var <= 3), 
(let var : nat = 10, var2: nat1 = 20 in var + var2),
(let x, y in set t9 be st x > 2 and y < x in x + y), 
{ var | var in set t9 & var > 1 }, 
{ var+var2 | var in set t9, var2 in seq t10 & var > var2 }, 
[ var | var in set t9 & var > 1 ], 
[ var | var in seq t10 & var > 1 ],
[ var | var in seq [1,2,3,7,8,9] & (var > 4)],
if v1 > v2 then v1 else v2,
if v1 > v2 then v1 else if v1 < v2 then v2 else 0, 
(def var : nat = 10 in var+var), 
v64.#1,
v64.#2,
v64.#3,
v64.#4

