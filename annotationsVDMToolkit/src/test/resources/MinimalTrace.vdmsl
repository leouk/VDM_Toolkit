--@vdm2isa
module MinimalTrace
exports all
definitions 

types
	Mandate = <Mandatory> | <Desirable> | <Voluntary>
	ord m1 < m2 == 
		let 
			value =  --map (<Mandatory> | <Desirable> | <Voluntary>) to nat1
				{ <Mandatory> |-> 1,
					<Desirable> |-> 2,
					<Voluntary> |-> 3
				}
		in
			value(m1) < value(m2);			

  --Witness(mk_R(<Mandatory>, {}))
  --Witness(mk_R(<Mandatory>, {1,2,3}))
  --@vdm2isa
	R ::
		x: Mandate
		y: set of nat
  inv mk_R(-, y) == card y <= 4;
		
functions
	make_r: () -> R
	make_r() == mk_R(<Desirable>, {1,2,3});
		
state T of
	r: R
inv mk_T(mk_R(x,y)) == y <> {} and x <> <Voluntary>
init t == t = mk_T(mk_R(<Mandatory>, {1}))
end

operations	

	Main(n: R) ==
		(
		--@Printf("r=%s", r)
		r := n;
		)
	ext wr r
	post
		--@OnFail("r=%s", r)
		--@vdm2isa
		--(r.x = <Mandatory>)
		--and
		(r = n);

traces
	TR_MAIN: Main(make_r());
	
end MinimalTrace