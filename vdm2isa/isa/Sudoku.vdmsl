/**
 * Model of the Sudoku puzzle.
 */
values
	SIZE = 9;	-- Dimensions of the board

types
	Pos = nat * nat
	inv mk_(r, c) == r < SIZE and c < SIZE;

	Board = map Pos to nat1
	inv b == card dom b <= SIZE * SIZE;

functions
	run: () -> seq of char
	run() ==
		print(solve({|->}));

	print: Board -> seq of char
	print(board) ==
		let BOARD = [0,1,2,3,4,5,6,7,8], DIGITS = "123456789" in conc
		[
			[ DIGITS(board(mk_(r, c))) | c in seq BOARD ] ^ "\n" | r in seq BOARD
		];

	solve: Board -> [Board]
	solve(board) ==
		if (card dom board = SIZE * SIZE)
		then board
		else
			let r, c in set {0, ..., SIZE-1} be st mk_(r, c) not in set dom board in 
			let possible = { p | p in set {1, ..., SIZE} & allowed(p, r, c, board) } in
				try(possible, mk_(r, c), board)
	measure SIZE * SIZE - card dom board;

	try: set of nat1 * Pos * Board -> [Board]
	try(possible, move, board) ==
		if possible = {}
		then nil
		else
			let p in set possible in
			let solution = solve(board munion {move |-> p}) in
				if solution = nil
				then try(possible \ {p}, move, board)
				else solution
	measure is not yet specified;	-- Complicated!!

	allowed: nat1 * nat * nat * Board +> bool
	allowed(p, r, c, board) ==
		( let r3 = 3 * (r div 3), c3 = 3 * (c div 3) in
			not exists r' in set {r3, ..., r3+2}, c' in set {c3, ..., c3+2} &
				r' <> r and c' <> c
				and mk_(r', c') in set dom board and board(mk_(r', c')) = p )
		and not exists mk_(r', c') in set dom board &
				(r = r' or c = c') and board(mk_(r', c')) = p;

