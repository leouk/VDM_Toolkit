module TestV2IFcnsRecursiveComplexNat
exports all
definitions

functions
	g: nat -> nat
	g(x) == if x = 0 then 10 else g(x-1)+x
	measure x;
	
	fact: nat -> nat
	fact(n) == 
		if n = 0 then 
			1
		else
			n * fact(n-1)
	measure n;	

	facti: nat * nat -> nat
	facti(n, p) ==
		if n = 0 then
			p
		else
			facti(n-1, n*p)
	measure 
		n;

	fibr : nat -> nat
	fibr(n) ==
		if n = 0 then 
			0
		else if n = 1 then
			1
		else
			fibr(n-2) + fibr(n-1)
	measure
		n--fibr_m
		;

	fibr2 : nat1 -> nat1
	fibr2(n) ==
		if n in set {1,2} then 
			1
		else
			fibr2(n-2) + fibr2(n-1)
	measure
		n;
	
	-- (Fn-1, Fn) = (Fn, Fn+1)		
	nextfib: (nat * nat) -> nat * nat
	nextfib(mk_(prev,curr)) == mk_(curr, prev+curr);
	
	-- fibpair(n) = (Fn-1, Fn+1)
	fibpair: nat -> nat * nat
	fibpair(n) == 
		if n = 1 then 
			mk_(0,1) 
		else
		 nextfib(fibpair(n-1))
	measure
		n--fibr_m
		;

	fibi0 : nat * nat * nat -> nat
	fibi0(n,prev,curr) ==
		if n = 1 then 
			curr 
		else
			fibi0(n-1, curr, prev+curr)
	measure 
		n--fibi_m
		;
	
	-- fibi(5) = fibi0(5, 				0, 1)		
	--					 = fibi0(4, 				1, 0+1)					= fibi0(4, 1, 1)
	--					 = fibi0(3, 		(0+1), 1+(0+1))			= fibi0(3, 1, 2)
	--					 = fibi0(2, 1+(0+1), (0+1)+1+(0+1))= fibi0(2, 2, 3)
	--					 = fibi0(2, 2, 3)  								 
	--					 = fibi0(1, 3, 2+3)								= fibi0(1,3,5) = 5
	fibi: nat -> nat
	fibi(n) == fibi0(n, 0, 1);
	
	sumR: seq of int -> int
	sumR(ss) == 
		cases ss:
			[]		 -> 0,
			[x]^xs -> x + sumR(xs)
		end
	measure
		len ss;	 
		
	ack: nat * nat -> nat
	ack(m,n) == 
		if m = 0 then
			n+1
		else if n = 0 then -- m > 0
			ack(m-1,1)
		else -- m > 0 and n > 0
			ack(m-1,ack(m,n-1))
	--measure
		--m*n+n
		--if n = 0 then m else m*n+n
		--m = 0 then 0 else if n = 0 then m else n
	;	
	
	ackF: nat -> (nat -> nat)
	ackF(m) == 
		if m = 0 then 
			(lambda x: nat & x + 1)
		else 
			(lambda n: nat & iter(ackF(m-1), n))
	measure
		ackF_measure
	;
	
	ackF_measure: nat -> nat
	ackF_measure(m) == m;
	
	iter: (nat -> nat)  * nat -> nat
	iter(f, n) == 
		if n = 0 then
			f(1)
		else
			f(iter(f,n-1))
	measure
		n
	;
				
end TestV2IFcnsRecursiveComplexNat