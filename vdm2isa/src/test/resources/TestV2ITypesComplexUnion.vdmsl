module TestV2ITypesComplexUnion
exports all
definitions

types

	--@NB VDM merges these two? i.e. widens to largest possible types?
	TUnion = nat | int;
	TUnion'= nat | real;
	
	--@NB but then not within structures
	TUnion2 = seq of nat | set of real;
	TUnion2'= seq of nat | seq of real;
	
	TUnion21 = nat | real;
	TUnion21' = set of TUnion21;
	
	TBasic = nat;
	
	TBasic2 = TBasic
	inv t == t > 10;
	
	TUnion3 = TBasic2 | TUnion2;	
	
	-- this will be tricky: entails implicit union deconstruction for both cases :-(
	-- user defined union type invariants are better avoided! 
	TUnion4 = int | real
	inv u == u > 0;
	
	TUnion5 = int | nat
	inv u == u < 0;

	-- this will be tricky: entails is_ expr deconstruction over the union. Oh man. s
	--@NB this is not handled properly in VDMJ? 
	TUnion6 = int | nat
	inv u == (is_nat(u) => u > 0) and (is_int(u) => u < 0);

	-- try one with named type is test as well
	TUnion6' = int | nat
	inv u == (is_(u, int) => u < 0) and (is_(u, TBasic) => u > 0);
	
	--quotes *must* be part of a union (and not dangling) we need their unique names on literals
	TQuoteUnion = <A> | <B> | <C>;
	
	--other unions are okay
	TBasicUnion = nat | int;
	
	--you can mix unions
	TBasicQuoteUnion = TBasicUnion | TQuoteUnion; 
	
functions

	f1: TUnion6 -> bool
	f1(u6) == u6 > 10;
	
	f2: TUnion2 -> bool
	f2(u2) == is_(u2, seq of nat) => card elems u2 = len u2;

	f3: TUnion6 -> bool
	f3(u6) ==
		cases true:
			(is_nat(u6)) -> u6 > 10,
			(is_int(u6)) -> u6 < 10,
			others		 -> u6 > 100
		end;
		
	-- union selection across multiple unions becomes quite messy/confusing; obfuscated even?!
	f4: TUnion6 * TUnion2 -> bool
	f4(u6, u2) ==
		(is_int(u6) => 
			((is_(u2, seq of nat) => u6 in set elems u2)
			 and
			 (is_(u2, set of real) => u6 in set u2)
			)
		)
		and
		(is_nat(u6) => 
			((is_(u2, seq of nat) => not u6 in set elems u2)
			 and
			 (is_(u2, set of real) => not u6 in set u2)
			)
		)
		;
	/*
	and(
		implies(is_expr(u6, int), 
			and(implies(is_expr(u2, seq of nat), “u6 in elms u2”),  
				implies(is_expr(u2, set of real), “u6 in u2”)
			)
		),
		implies(is_expr(u6, nat),
			and(implies(is_expr(u2, seq of nat), “not u6 in elms u2”),  
				implies(is_expr(u2, set of real), “not u6 in u2”)
			)
		)
	)
	*/
	
	-- this one because every type in u2 is a seq, then don't need to faff around (in VDM)!
	-- translation will always be "complete"/"explicit" given the constructive approach of sum types 
	f4': TUnion6 * TUnion2' -> bool
	f4'(u6, u2) ==
		u6 in set elems u2;
			 
 	f6: TUnion6 -> int
	f6(u) == u;

	f6': TUnion6' -> int
	f6'(u) == u;
	
	
	f7: TQuoteUnion -> bool
	f7(qu) == qu <> <A>;

	f8: TBasicUnion -> int
	f8(bu) == bu;
	
	--f8': TBasicUnion -> [nat]
	--f8'(bu) == if is_nat(bu) then bu else nil;
	
	f9: TBasicQuoteUnion -> bool
	f9(bqu) == if is_TBasicUnion(bqu) then f8(bqu) > 10 else f7(bqu);

	f9': TBasicQuoteUnion -> bool
	f9'(bqu) == 
		cases true:
			(is_TBasicUnion(bqu)) -> f8(bqu) > 10,
			(is_TQuoteUnion(bqu)) -> f7(bqu)
		end;

end TestV2ITypesComplexUnion

