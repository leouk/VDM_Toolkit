module A
-- no exports yet
exports 
	values v: nat;
	types T; struct S;
	functions f: nat -> nat;
definitions
values 
	v: nat = 10; --value export
	p: nat = 10; --value not exported
types
	T = nat inv t == t > v; --opaque export	
	S = nat inv s == s < v; --struct export
	Q = nat inv q == q > 0; --not exported
functions
	f: nat -> nat --function export
	f(a) ==
		-- @Printf("Hello = %s\n", a)
		a + 1;
		
	h: nat -> nat --function not exported
	h(a) == a;

end A

module B
imports from A 
	functions f: nat -> nat renamed F; --renamed import
	values v; -- inlined import
exports 
	functions g: nat -> nat;
definitions
functions	
	g: nat -> nat
	g(a) == F(a) - 1 + A`v;

end B

module C
imports 
	from A values v,	--inlined import across modules
	from B functions g
exports all
definitions
functions
	h: nat -> nat
	h(a) == B`g(a) - A`v;
end C