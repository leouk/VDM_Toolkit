module TestV2ITypesFieldOfUnion
exports all
definitions

types
	R :: 
		x: nat 
		y: real;
		
	S :: 
		x: nat 
		z: seq of nat
		y: set of nat;
		
	T :: 
		x: nat 
		y: seq of int;
	
	W :: 
		x: nat
		r: R;
		
	K :: 
		x: nat 
		w: W;
		
	I = R | S | T;
	
	--@doc record with inner union type
	--TODO: field expressions like z.i.z or z.i.y (which will have different types)!
	Z :: 
		x: nat 
		i: I;
		
	U = I | W | K | Z | int;

functions 
	
	fr: nat -> U
	fr(v) == if v < 10 then mk_R(v, v) else mk_S(v, [], {})
	post 
		RESULT.x = v; 

/*	
	fw: nat -> U
	fw(v) == mk_W(v, mk_R(v, 0))
	post 
		--@doc how to know that result will be of type W? 
		RESULT.x = v and RESULT.r.x = v; 
*/
	fk: K -> bool
	fk(k) == k.x > 10 and k.w.x > 20 and k.w.r.x > 30;


end TestV2ITypesFieldOfUnion