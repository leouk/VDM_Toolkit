module TestV2IDeclBeforeUse
exports all
definitions 
functions
	head: seq of nat -> nat 
	head(s) == hd s
	pre len s > 0;

	tail: seq1 of nat -> seq of nat
	tail(s) == tl s;
	
	sum_elems: seq of nat -> nat
	sum_elems(s) == if s = [] then 0 else head(s) + sum_elems(tail(s))
	measure len s; 

types
	
	--@doc implicit inv_T needed
	T = seq1 of nat
	-- inv t == true
		;
	
	--@doc uses type T and function tail before declaring them.
	S = T 
	inv s == 
		--inv_T(s) and 
		len tail(s) > 0;
	
	--@doc uses type S and function sum_elems before declaring them.
	R = S 
	inv r == 
		--inv_S(r) and
		sum_elems(r) < 5;
	
	--@doc if using dummy pattern for r, then inv_Rec and inv_R are like head/tail (incomparable)! 
	Rec :: 
		s: S t: T r: R
	--inv mk_Rec(s,t,-) == sum_elems(s) > sum_elems(t);
	inv mk_Rec(s,t,r) == 
		--inv_S(s) and inv_T(t) and inv_R(r) and
		sum_elems(s) > sum_elems(t) and len r > 1;
	
	Map = map S to Rec
	inv m == dom m = {}; 
			
end TestV2IDeclBeforeUse