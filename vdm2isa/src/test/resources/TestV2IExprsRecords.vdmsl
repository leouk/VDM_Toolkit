module TestV2IExprsRecords
exports all
definitions

types
	--TCRecordType,TCField,TCFieldList
	R :: 
		x: nat 
		y: nat	
	inv r == r.x < r.y;
	
functions
	-- Auxiliary to allow for TCApplicationExpression of TCRecordType result for mkr(1).x
	mkr: nat -> R
	mkr(n) == mk_R(n,n+1);
	
	--TCRecordBind
	recbind: R -> nat
	recbind(mk_R(x,y)) == x+y;

	--TCRecordBind
	recbindSpec: R -> nat
	recbindSpec(mk_R(x,y)) == x+y
	-- access to the record pattern bind!
	pre x < y
	post x < RESULT and y < RESULT;
	
	-- The one case where TRDefinition won't handle because of the use of SetComp for let-be-st!  
	--@LF Warning [VDM   ] 11102
	letbest: () -> nat
	letbest() == let mk_R(x,y): R be st x > y in x+y;
	
values

	v64= mk_(1,2,3,4);				
	--TODO: TCQuoteLiteralExpression quote literal requires quote type prior definition for Isabelle 
	--v13= merge mm;	
	--v18: S = mk_S();
	 v65: R = mk_R(1, 2);			--TCMkTypeExpression		
	v651 = mk_R(1,2).x;				 --TCFieldExpression via TRMkTypeExpression
	v652 = v65.x;     			     --TCFieldExpression via TRVariableExpression
	v653 = mkr(1).x;					--TCFieldExpression via TRApplyExpression
	v67: R = mu(v65, x |-> 10, y |-> 20);--TCMuExpression,TCRecordModifierList, TCRecordModifier
	
	v731=(iota mk_R(x,y) in set {v65} & x < y);
	v741=(lambda mk_R(x,y): R & x + y); --!!! Phew....
	--v742=(lambda mk_R(x,y) in set {v65} & x + y);
	v781=(forall mk_R(x,y) in set {v65} & y < x);
	v791=(let mk_R(x,y) = v65, var1: nat = 10 in var1+x+y);
	--v801=(let mk_R(x,y) in set {v65}, var: nat = 10 be st x < y in var+x+y);
	v801=(let mk_R(x,y) in set {v65} be st x < y in x+y);
	v810={ x+y | mk_R(x,y) in set {v65} & y < x };
	--v921= (def mk_R(x,y) = v65, var1: nat = 10 in var1+x+y); --TCDefExpression
	v921= (def mk_R(x,y) = v65 in x+y); --TCDefExpression
	--v922= (def mk_R(x,y): R in x+y); --TCDefExpression

	v923= { mk_R(x,y) | mk_R(x,y) in set {v65} & x < y };
	v924= { r | r in set {v65} & r.x < r.y };
	v925= { r | r in seq [v65] & r.x < r.y };

end TestV2IExprsRecords