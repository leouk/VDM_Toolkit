module TestV2IExprsMaps
exports all
definitions
	
	
values
	fv = 1;
	
	-- trivial map comp becomes map enum
	-- trivial map comp as no bound variable in maplet
	v1 = { 1 |-> 5 | x in set {1,2,3} };
	
	-- trivial map comp as no bound variable in maplet with "true"; unused warning is not useful
	v11= { 1 |-> 5 | x in set {1,2,3} & true };
	-- not trivial because of predicate, despite the trivial binding 
	v12= { 1 |-> 5 | x in set {1,2,3} & x > 5};
	
	
	-- easy map comp becomes mapCompSetBound with id-lambdas for dom/rng but not pred
	-- easy map comp as bound variable maps to binds directly or is a constant
	v2 = { x |-> 10 | x in set {1,2,3} };
	
	-- easy map comp (taht could be trivial, 3|->10, but depends on pred eval, so sorry)
	v21= { x |-> 10 | x in set {1,2,3} & x > 2 };
	
	
	-- easy map comp (that could be trivial, 1|->3, but depends on pred, and might even be invalid, e.g. x>=2!)
	v22= { 1 |-> x | x in set {1,2,3} & x > 2 };
	
	-- easy map comp with complex pred
	v23= { d |-> r | d in set {1,2,3}, r in set {2,4,6} & r = d*2 };
	
	-- easy map comp with complex pred with dangling fv
	v24= { d |-> r | d in set {1,2,3}, r in set {2,4,6} & r = d*2+fv };
	
	-- existential map comps (e.g. bindings don't match maplet) with "simple" result types
	v3 = { x+y |-> 10+fv 	  | x in set {1,2,3}, y in set {4,5,6} & x < y };
	v30= { x+y |-> 10+fv 	  | x in set {1,2,3}, y in set {4,5,6} };
	v31= { x+y |-> 10+fv 	  | x in set {1,2,3}, y in set {4,5,6} & x+fv < y };
	v32= { x+y |-> (x+y)*2+fv | x in set {1,2,3}, y in set {4,5,6} & 2*(x+fv) > y };
	
	-- existential map comp range with trivial dom; only works because of filter  
	v33={ 1 |-> x+x | x in set {1,2,3} & x+fv > 5 };
	
end TestV2IExprsMaps