------------------------------------------------------------------------------------
--@header 
--@doc Copyright Leo Freitas 2019-2022 
--@v2, 11/11/2022
--@doc Fast generic CSV processing library
--
--@doc REQUIREMENTS
--     1) User-defined, granular CSV data validation
--          1.1) Cell, row and column invariants
--          1.2) Tolerance to failing data
--          1.3) Useful error information for fixing it 
--     2) Simple top-level use 
--     3) As fast (and flexible) as possible IO
--          3.1) Multiple CSV formats tolerated
--          3.2) 
--
--@doc CSV parsing
--     CSV parsing compliance is tricky, as there are many formats out there.
--     e.g. https://commons.apache.org/proper/commons-csv/
--     as well as many varied implementations (see CSVParser type).
--
--     We want a solution that is fast, so we checked options within  
--     https://github.com/uniVocity/csv-parsers-comparison
--
--     We also want a solution with least dependencies, so were tempted with
--     Iterable stand alone version in https://stackoverflow.com/questions/6857248/fast-csv-parsing  
--     Other useful features might be interesting, so we considered filterd CSV from
--     https://stackoverflow.com/questions/61250600/univocity-csv-parser-skip-rows-based-on-conditions

module CSVLib
imports 
    from VDMUtil 
        functions 
            val2seq_of_char renamed val2seq_of_char;
    ,
    from IO
        operations 
            printf renamed printf;
exports 
    types
        struct String;
        struct String1;
        struct Path;
        struct FileStatus;
        struct Header0;
        struct Header;
        struct Headers0;
        struct Headers;
        struct Reason;
        struct Error;
        struct Errors;
        struct RowNo;
        struct ColNo;
        struct Row;
        struct TransposedRow;
        struct Matrix;
        struct Data0;
        struct Data;
        struct CSVType;
        struct CSVCellInv;
        struct CSVRowInv;
        struct CSVColInv;
        struct CSVFileInv;
        struct CSVValue; 
        struct CSVParser;
        struct CSVSettings;
    values 
        CELL_INVARIANT_DEFAULT: CSVCellInv;
        ROW_INVARIANT_DEFAULT : CSVRowInv;
        COL_INVARIANT_DEFAULT : CSVColInv;
        EMPTY_MATRIX          : Matrix;
        EMPTY_CSV             : Data;
        DEFAULT_SETTINGS      : CSVSettings;
        DEFAULT_HEADER_NAME   : String1;
    functions 
        --@doc native functions to process CSV data IO 
        file_status          : Path -> FileStatus;
        csv_read_data        : Path * CSVParser * CSVSettings * Headers0 -> bool * Errors * Data0;
        csv_write_data       : Path * Data0 * nat -> bool;
        --@doc functions on basic row and cell consistency
        row_consistency      : Headers0 * Row -> bool;
        col_consistency      : Header0 * TransposedRow -> bool;
        csv_type_check       : CSVType * CSVValue -> bool;
        csv_default_value    : CSVType -> CSVValue;
        --@doc functions identifying (and purging) invalid line/columns
        filter_errors        : Matrix * Errors -> Matrix;
        csv_invariants_failed: Data0 -> Errors;
        csv_filter_invalid   : Data0 -> Data;
        --@doc construction functions for empty and updated row invariant data
        empty_csv            : seq of Header -> Data;
        empty_csv'           : CSVSettings * seq of Header -> Data;
        install_row_invariant: Data0 * CSVRowInv -> Data0;
        install_col_invariant: Data0 * CSVColInv * set1 of ColNo -> Data0;
    operations
        --@doc Loads CSV data from a given file with given parser back-end choice and
        --     specific headers. If trivial load, no invariants and just list of header types.
        --     Any IO (or VDM Value) erros can be shown if they occur.
        showError     : () ==> ();
        loadCSV       : Path * CSVParser * CSVSettings * Headers0 * bool ==> ();
        loadSimpleHeadersCSV: Path * CSVParser * seq1 of CSVType * bool ==> ();
        printCSV      : Path * nat ==> ();
        getCSVData    : () ==> Data;
        getCSVErrors  : () ==> Errors 


definitions
types
    String = seq of char;

    String1 = seq1 of char;

    --@doc native methods sensitive to '/' (Linux) and '\' (Windows) path separators
    --     as well as absolute (/path) or relative (./path) files names. 
    Path = String1; 

    FileStatus = <Valid> | <DoesNotExist> | <CannotBeRead> | <CannotBeWritten> | <IsDirectory>; 

    --@doc allowed CSV types and values
    --@todo add mappings Name=Value,Value?
    CSVType = <Integer> | <Float> | <String> | <Boolean>; 

    CSVValue = int | real | String | bool;

    --@doc CSV parser IO back-end choices. Native is a variation of an implemention as a state 
    --     machine. Other implementations are linked below. They vary in clarity,
    --     speed, dependenecies, and variety of CSV formats. 
    --          Native    = https://stackoverflow.com/questions/6857248/fast-csv-parsing
    --          Apache    = https://commons.apache.org/proper/commons-csv/
    --          Univocity = https://github.com/uniVocity/univocity-parsers
    --          OpenCSV   = https://opencsv.sourceforge.net
    --          QuirkCSV  = https://github.com/bpoole6/quirk-csv
    --
    --@doc only native and univocity links are implemented so far
    CSVParser = <Native> | <Univocity> | <Apache> | <OpenCSV> | <QuirkCSV>; 

    --@doc CSV format settings 
    --@todo Univocity contains a rather rich settings; explore?
    CSVSettings :: 
        skipBlankLines: bool 
        namedHeaders: bool
        lineCommentStr: [String1];

    --@doc CSV cell invariants. A function that checks CSVValue against corresponding type.
    --     Minimal check is type agreement.
    CSVCellInv = (CSVType * CSVValue -> Reason);

    --@doc CSV whole row invariant. A function that checks the row of values against all headers. 
    --     Minimal check is size consistency between row and header (e.g. no short rows).
    --     A useful use case could be that value dependencies across a row are enforced (e.g. bmi=weight/height*height)
    CSVRowInv = (Headers0 * Row -> Reason);

    --@doc CSV whole col invariant. A function that checkls the column of values against a header. 
    --     There is no minimal check, given type agreement across column for all rows already happen at the cell level.
    --     A useful use case could be ascending order of values or no repetition.
    --@doc The row parameter here corresponds to transposed cells (i.e. column view across all rows).
    CSVColInv = (Header0 * TransposedRow -> Reason);

    CSVFileInv = (Headers0 * Matrix -> Reason);

    --@doc Header prior to IO containing a name, type, default value, and cell and col invariants.
    --     The default value is important for missing CSV values within commas, and default must be type correct.
    Header0 :: 
        name: [String1]
        type: CSVType
        default: CSVValue
        cell_invariant: [CSVCellInv]
        col_invariant : [CSVColInv]
    inv mk_Header0(-, t, d, -, -) ==
        csv_type_check(t, d);

    --@doc named header, usually after CSV IO
    Header = Header0 
    inv mk_Header0(h, -, -, -, -) == h <> nil;

    --@doc Prior to IO header list representing expected types and their (possibly empty) invariants.
    Headers0 = seq of Header0;

    --@doc Final header, where names are known; usually after native call. 
    Headers = seq1 of Header;

    Row = seq of CSVValue;

    --@doc synonym for a column view over all rows. 
    TransposedRow = Row; 

    --@doc collection of CSV rows corresponds to a sequence of Row and a row invariant. 
    Matrix :: 
        cells: seq of Row
        row_inv: [CSVRowInv];

    RowNo = nat1;

    ColNo = nat1;

    Reason = [String1];

    --@doc CSV error corresponding to a specific rol/col position
    --     with an optional reason. 
    Error ::
        row: RowNo
        col: ColNo 
        --@todo Equality on on rol/col? Or allow multiple reasons?
        --reason:- Reason
        reason: Reason
    inv mk_Error(-,-,r) == r <> nil;

    Errors = set of Error; 

    --@doc CSV data contains its (possibly nameless) headers and its matrix as in:
    --
    -- R0    H1   |   H2   ... |   Hj
    -- R1  v(1,1) | v(1,2) ... | v(1,j)
    -- ...
    -- Ri  v(i,1) | v(i,2) ... | v(i,j)
    --
    Data0 :: 
        settings: CSVSettings
        headers : Headers0
        matrix  : Matrix
        file_inv: [CSVFileInv]
    inv mk_Data0(-, h, -, -) == 
        --@doc if headers are available, check that have names
        (h <> [] => is_Headers(h));
    
    --@doc Loaded CSV matrix where all invariants are valid. Expensive invariant check across the whole CSV data.
    Data = Data0 
    inv d == csv_invariants_failed(d) = {};

values
    --@doc default invariants and key constants
    CELL_INVARIANT_DEFAULT: CSVCellInv = (lambda t: CSVType, v: CSVValue & if csv_type_check(t, v) then nil else "value read is not of its declared type");
    ROW_INVARIANT_DEFAULT : CSVRowInv  = (lambda h: Headers0, r: Row & if row_consistency(h, r) then nil else "unexpected short row in CSV matrix");
    COL_INVARIANT_DEFAULT : CSVColInv  = (lambda h: Header, c: TransposedRow & if col_consistency(h, c) then nil else "unexpected column in CSV matrix");
    EMPTY_MATRIX          : Matrix     = mk_Matrix([], nil);
    DEFAULT_SETTINGS      : CSVSettings= mk_CSVSettings(false, true, nil);
    EMPTY_CSV             : Data       = mk_Data0(DEFAULT_SETTINGS, [], EMPTY_MATRIX, nil);
    DEFAULT_HEADER_NAME   : String1    = "CSVHeader";

functions 

    --@doc every row of data must match the expected header's length (i.e. no short rows).
    line_col_size_consistency: Headers0 * Matrix -> bool
    line_col_size_consistency(headers, mk_Matrix(cells, -)) == 
        (forall i in set inds cells & row_consistency(headers, cells(i)));
        
    --@doc row and header size agreed (e.g. no short rows) 
    row_consistency: Headers0 * Row -> bool 
    row_consistency(headers, row) == len headers = len row; 

    --@doc nothing for now; leave type checking to cells.
    col_consistency: Header0 * TransposedRow -> bool
    col_consistency(mk_Header0(-, -, -, -, -), -) ==
        true;--(forall i in set inds col & csv_type_check(t, col(i));

    --@doc checks user given (possibly nameless) headers match resulting IO headers
    installed_read_headers_consistency: Headers0 * Headers -> bool 
    installed_read_headers_consistency(h, h') ==
        len h = len h' 
        and 
        --@doc headers are the same, except for the names
        (forall i in set inds h & 
            h(i).type = h'(i).type 
            and 
            --@Warning(5037) here just checking structural equality rather than computation.
            (h(i).cell_invariant = h'(i).cell_invariant)); 

    --@doc creates empty CSV matrix with expected headers
    empty_csv': CSVSettings * seq of Header -> Data
    empty_csv'(settings, headers) == mk_Data0(settings, headers, EMPTY_MATRIX, nil)
    post RESULT.settings = settings and RESULT.headers = headers and RESULT.matrix.cells = [];

    empty_csv: seq of Header -> Data
    empty_csv(headers) == empty_csv'(DEFAULT_SETTINGS, headers)
    post post_empty_csv'(DEFAULT_SETTINGS, headers, RESULT);
    
    --@doc removes given error rows from the given matrix 
    filter_errors: Matrix * Errors -> Matrix 
    filter_errors(matrix, errors) ==
        if errors = {} then 
            matrix 
        else 
            let error_rows: set of RowNo = { e.row | e in set errors } in
                mk_Matrix([ matrix.cells(i) | i in set inds matrix.cells & not i in set error_rows ], matrix.row_inv)
    post RESULT.row_inv = matrix.row_inv and 
         elems RESULT.cells subset elems matrix.cells;

    --@doc checks the full path file status.
    file_status: Path -> FileStatus 
    file_status(path) == is not yet specified; 

    --@doc Reads CSV data. Presumes header names are in the first line of the CSV file;
    --     empty names are allowed (i.e anonynous headers), yet user must provide their type signature. 
    --     Headers can have invariants. 
    --
    --     Result contains IO status, anu short rows errors, and resulting CSV matrix without short rows,
    --     where invariants will be checked later for violations. Variations are:
    --     * not ok              = low-level IO error, must return empty matrix;
    --     * ok and errors <> {} = short-rows errors, returns matrix without short rows;
    --     * ok and errors = {}  = no errors, returns matrix that might fail invariants.
    csv_read_data: Path * CSVParser * CSVSettings * Headers0 -> bool * Errors * Data0
    csv_read_data(path, parser, settings, headers) == is not yet specified
    pre file_status(path) = <Valid>
    post 
        (let mk_(ok, -, mk_Data0(settings', headers', matrix', finv')) = RESULT in
            if ok then
                --@doc no change in settings after CSV IO
                settings' = settings 
                and
                --@doc headers update keep old header's structure
                installed_read_headers_consistency(headers, headers')
                and
                --@doc no short rows
                (line_col_size_consistency(headers', matrix'))--filter_errors(matrix, errors)))
            else 
                headers' = [] and matrix' = EMPTY_MATRIX and finv' = nil
        ); 

    --@doc Prints the CSV data to the given file name, allowing print with invariant failures (Data0) 
    csv_write_data: Path * Data0 * nat -> bool
    csv_write_data(path, data, precision) == is not yet specified
    pre file_status(path) in set {<Valid>, <DoesNotExist>}
    post (RESULT => file_status(path) = <Valid>);

    --@doc basic CSV values type check
    csv_type_check: CSVType * CSVValue -> bool
    csv_type_check(t, v) == 
        cases t: 
            <Integer> -> is_int(v),
            <Float>   -> is_real(v),
            <String>  -> is_String(v),
            <Boolean> -> is_bool(v),
            others    -> false 
        end;
    
    --@doc CSV default values per type
    csv_default_value: CSVType -> CSVValue 
    csv_default_value(t) ==
        cases t: 
            <Integer> -> 0,
            <Float>   -> 0.0,
            <String>  -> "",
            <Boolean> -> false 
        end;

    --@doc removes rows of (cell, row or column) invariant violating cells  
    csv_filter_invalid: Data0 -> Data
    csv_filter_invalid(data) == 
        --@doc avoid mk_Data0(...) on input checking invariant of Data0 multiple times
        let errors: Errors = csv_invariants_failed(data) in
            mk_Data0(data.settings, data.headers, filter_errors(data.matrix, errors), data.file_inv)
    post data.settings = RESULT.settings 
         and 
         data.headers = RESULT.headers 
         and
         data.file_inv = RESULT.file_inv
         and 
         RESULT.matrix.row_inv = data.matrix.row_inv 
         and
         elems RESULT.matrix.cells subset elems data.matrix.cells;

    --@doc changes the matrix row invariant
    install_row_invariant: Data0 * CSVRowInv -> Data0
    install_row_invariant(mk_Data0(settings, headers, mk_Matrix(cells, -), file_inv), row_inv) == 
        mk_Data0(settings, headers, mk_Matrix(cells, row_inv), file_inv);

    --@doc changes the matrix col invariant for given columns
    install_col_invariant: Data0 * CSVColInv * set1 of ColNo -> Data0
    install_col_invariant(mk_Data0(settings, headers, matrix, file_inv), col_inv, cols) == 
        let headers': Headers0 =
            [ (let mk_Header0(n, t, d, cli, -) = headers(col) in 
                    mk_Header0(n, t, d, cli, col_inv))
              | 
               col in set cols 
            ] in
            mk_Data0(settings, headers', matrix, file_inv)
    pre cols subset inds headers;

    --@doc concatenate / absorb error reasons 
    concat_reason: Reason * Reason -> Reason
	concat_reason(r1, r2) == 
		--@doc absorb nil and don't repeat same message
        if r1 = nil then 
			r2 
		else if r2 = nil then 
			r1 
		else if r2 = r1 then
			r2
		else
			r1 ^ "\n" ^ r2;

    file_invaraint_check: Data0 -> Reason 
    file_invaraint_check(mk_Data0(-, headers, matrix, file_inv)) == 
        if file_inv = nil then nil else file_inv(headers, matrix); 

    --@doc cheks no short rows and user defined row invariant concatenating their reasons 
    row_invariant_check: Headers0 * Matrix * RowNo -> Reason
    row_invariant_check(headers, mk_Matrix(cells, row_inv), rowNo) ==
        concat_reason(
            ROW_INVARIANT_DEFAULT(headers, cells(rowNo)),
            if row_inv = nil then nil else row_inv(headers, cells(rowNo)))
    pre rowNo in set inds cells;

    --@doc cheks user defined col invariant 
    col_invairant_check: Headers0 * Matrix * ColNo -> Reason 
    col_invairant_check(headers, mk_Matrix(cells, -), colNo) == 
        let header: Header0       = headers(colNo) in
            if header.col_invariant = nil then nil else 
                let 
                    trow  : TransposedRow = [ cells(l)(colNo) | l in set inds cells ]
                in 
                    header.col_invariant(header, trow)
    pre colNo in set inds headers;

    --@doc checks cell value type consistency and user dfined cells invariant concatenating their reasons
    cell_invariant_check: Headers0 * Matrix * RowNo * ColNo -> Reason 
    cell_invariant_check(headers, mk_Matrix(cells, -), rowNo, colNo) ==
        let type: CSVType  = headers(colNo).type, 
            cell: CSVValue = cells(rowNo)(colNo)
        in
            concat_reason(
                CELL_INVARIANT_DEFAULT(type, cell),
                if headers(colNo).cell_invariant = nil then nil else headers(colNo).cell_invariant(type, cell))
    pre rowNo in set inds cells 
        and 
        colNo in set inds headers 
        and 
        colNo in set inds cells(rowNo)
        and
        --@todo redundant if not exporeted? or keep for intra-consistency?
        row_consistency(headers, cells(rowNo));

    --@doc Collects Errors where invariants failed. 
    csv_invariants_failed: Data0 -> Errors
    csv_invariants_failed(mk_Data0(-, headers, matrix, -)) == 
        let all_rows: set of RowNo = inds matrix.cells,
            all_cols: set of ColNo = inds headers, 
            bad_rows: set of RowNo = 
                { r | r in set all_rows & row_invariant_check(headers, matrix, r) <> nil },
            bad_cols: set of ColNo = 
                { c | c in set all_cols & col_invairant_check(headers, matrix, c) <> nil },
            failing_cells: set of (RowNo * ColNo) =
                { mk_(r, c) 
                  | r in set all_rows \ bad_rows, c in set all_cols \ bad_cols 
                  & cell_invariant_check(headers, matrix, r, c) <> nil
                },
            bad_rows_errors: Errors = 
                { mk_Error(r, c, "Invalid row  invariant: " ^ row_invariant_check(headers, matrix, r)) | r in set bad_rows, c in set all_cols },
            bad_cols_errors: Errors = 
                { mk_Error(r, c, "Invalid col  invariant: " ^ col_invairant_check(headers, matrix, c)) | r in set all_rows, c in set bad_cols },
            bad_cell_errors: Errors = 
                { mk_Error(r, c, "Invalid cell invariant: " ^ cell_invariant_check(headers, matrix, r, c)) | mk_(r, c) in set failing_cells }
        in
            bad_rows_errors union bad_cols_errors union bad_cell_errors;
            
--@doc CSV state: CSV file, CSV parser, (IO and other) erros, strict invariant validation, 
--     invariant errors, and CSV matrix.  
state CSV of 
    file    : [Path]
    parser  : CSVParser
    ferr    : Reason
    strict  : bool
    pos     : Errors
    data    : Data0
inv mk_CSV(file, -, -, strict, pos, data) ==
        --@doc if file is set, it must be valid
        (file <> nil => file_status(file) = <Valid>)
        and
        --@doc if strict, must be valid matrix and no errors
        (strict => is_Data(data) and pos = {})  
        and 
        --@doc failed errors position are within the CSV matrix 
        (pos <> {} => { r | mk_Error(r, -, -) in set pos } subset inds data.matrix.cells and 
                      { c | mk_Error(-, c, -) in set pos } subset inds data.headers)      
init csv == 
        csv = mk_CSV(nil, <Native>, nil, false, {}, empty_csv([]))
end

operations 

    --@doc returns last IO error or nil if none.
    lastError: () ==> Reason
    lastError() == is not yet specified;

    printErrors(errors: Errors) == 
        (
        for all mk_Error(r, c, reason) in set errors do
        (
            printf("\n\t(%1s,%2s): %3s", [r, c, reason]);
        );
        printf("%1s", ['\n']);
        )
    --@doc ext rd to say it doesn't write to anything
    ext rd file
    pre errors <> {};

    --@doc shows various errors if the state registered it
    showError() ==
        (if ferr <> nil then 
            printf("CSV native call error: %1s\n", [ferr]);
         ferr := lastError();
         if ferr <> nil then 
            printf("CSV native call IO error: %1s\n", [ferr]);
         if pos <> {} then 
         (
            printf("CSV invariant failure at %1s cells: ", [card pos]);
            printErrors(pos);
         );
        )
    ext rd pos wr ferr;
    
    --@doc sets CSV file path and zeros matrix, registering/showing any IO errors. 
    setupCSV(path: Path, parserChoice: CSVParser, settings: CSVSettings, headersToInstall: Headers0, s: bool) == 
        (atomic
            (file     := path;
             parser   := parserChoice;
             strict   := s;
             pos      := {};
             data     := empty_csv'(settings, headersToInstall);
            );
         printf("CSV %1ssetup with %2s parser and %3s headers for %4s\n", 
            [if s then "strict " else " ", parserChoice, len headersToInstall, path]);
         showError();
        )
    ext wr file, parser, data, strict, pos
    pre file_status(path) = <Valid> and headersToInstall <> []
    post file = path and file <> nil and 
         parser = parserChoice and strict = s and pos = {} and 
         data = empty_csv'(settings, headersToInstall);

    --@doc loads CSV matrix through CSV parser IO, returing only if valid (invariant holding) data
    loadData() == 
        (let mk_(ok, short_row_errors, data') = csv_read_data(file, parser, data.settings, data.headers) in
            if ok then 
            (   
                if short_row_errors <> {} then 
                (
                    printf("CSV (IO) error: ignoring %1s short rows from %2s", [card short_row_errors, file]);
                    printErrors(short_row_errors);
                    if strict then 
                    (
                        atomic (
                            data := empty_csv'(data'.settings, data'.headers);
                            pos := {};
                        );
                        --@doc if strict, clear data + pos; otherwise, carry on with invariant checks
                        return;
                    )
                );
                --@doc check invariants using the installed headers against read rows
                let lcs: Errors = csv_invariants_failed(data') in
                    if (lcs = {}) then
                    (
                        --@doc if no file invariant errors
                        if file_invaraint_check(data') = nil then
                            --@doc update the headers with names as well, if successful.
                            atomic (
                                data := data';
                                pos  := lcs;
                            )
                        --@doc there file invariant errors
                        else 
                            (
                                printf("CSV overall file invariant failed for %1s", [file]);
                                atomic (
                                    data  := if strict then empty_csv'(data'.settings, data'.headers) else data';
                                    pos   := lcs;
                                );   
                            )
                    )
                    --@doc there are invariant errors
                    else
                    (
                        printf("CSV invariants failed for %1s: %2s", [file, card lcs]);
                        --@doc pick the named headers and set invariant violation positions, zeroing matrix if stric
                        atomic (
                            data  := if strict then empty_csv'(data'.settings, data'.headers) else data';
                            pos   := if strict then {} else lcs;
                        );
                    )
            )
            else 
            (
                atomic (
                    data := empty_csv'(data.settings, data.headers);
                    pos  := {};
                );
                
            );
            showError();
        )
    ext rd file, parser, strict wr data, pos
    pre  --@doc both file and headers have been set. 
         file <> nil and data.headers <> [] and data.matrix.cells = []
    post --@doc state type invariant will ensure csv_invariants_failed is empty.              
         (strict => pos = {}); 

    --@doc top-level call: given a file and typed headers (possibly with invariants)
    --     loads the CSV as part of the state
    loadCSV(path: Path, parserChoice: CSVParser, settings: CSVSettings, headersToInstall: Headers0, s: bool) == 
        (
            printf("Loading CSV file %1s\n", [path]);
            if file_status(path) <> <Valid> then 
                showError()
            else 
            (
                setupCSV(path, parserChoice, settings, headersToInstall, s);
                loadData();
            );
        )
    ext wr CSV
    pre (file_status(path) = <Valid> => headersToInstall <> [])
    post post_loadData(CSV~, CSV);

    --@doc load file path with given headers and no invariants: insists on knowking header types. 
    loadSimpleHeadersCSV(path: Path, parserChoice: CSVParser, headerTypes: seq1 of CSVType, s: bool) ==
        (
            let headers: Headers0 = 
                [ mk_Header0(
                    DEFAULT_HEADER_NAME ^ val2seq_of_char[nat1](i), 
                    headerTypes(i), 
                    csv_default_value(headerTypes(i)),
                    CELL_INVARIANT_DEFAULT,
                    COL_INVARIANT_DEFAULT
                  ) 
                  | 
                  i in set inds headerTypes 
                ] 
            in 
                loadCSV(path, parserChoice, DEFAULT_SETTINGS, headers, s);
        )
    ext wr CSV 
    post post_loadData(CSV~, CSV);

    --@doc creates/overwrites given file path with loaded CSV matrix
    printCSV(path: Path, precision: nat) == 
        (if (file = nil) then
            printf("CSV not yet loaded %1s",['\n'])
         else if ferr = nil and pre_csv_write_data(path, data, precision) then
            if file = path then 
                printf("Cannot print to the same CSV file loaded %1s\n", [file])
            else
                let ok = csv_write_data(path, data, precision) in 
                    if ok then
                        (
                            printf("CSV print successful for %1s\n", [path]);
                        )
                    else 
                        (
                            --@doc don't set ferr to avoid zeroing data, but warn of failure
                            printf("CSV print failed for %1s\n", [path]);
                        )
          else 
            printf("CSV write data native call precondition failure for %1s\n", [path]);
          --@doc show any invariant violations or IO errors from csv_write_data call
          showError();
        )
    ext rd file, ferr, data
    pre file_status(path) in set {<Valid>, <DoesNotExist>};

    -- @doc returns csv data; if not strict, might contain errors
    pure getCSVData: () ==> Data0
    getCSVData() == (
        return data--csv_filter_invalid(data);
    )
    pre file <> nil;

    -- @doc returns the list of invariant failure errors 
    pure getCSVErrors: () ==> Errors 
    getCSVErrors() == (
        return pos;
    )
    pre pre_getCSVData(CSV)
         
end CSVLib