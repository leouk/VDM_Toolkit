/*
   A module that specifies and defines general purpose functions over numerics.

   All definitions are explicit and executable.
*/
module Numeric
imports
from Support1
	functions
		fold renamed fold;
		indexOf renamed indexOf;
		padLeft renamed padLeft;
,
from Char
	types
		Digit renamed Digit;
	functions
		char2digit renamed char2digit;
	values
		DIGITS renamed DIGITS;
exports types struct Numeric; struct Numeric1; 
				functions min: real * real +> real;
                  max: real * real +> real;
                  formatNat: nat +> Numeric;
                  zeroPad: nat * nat1 +> Numeric;
                  formatNat: nat +> Numeric;
                  fromChar: Digit +> nat;
                  toChar: nat +> Digit;
                  add: real * real +> real;
                  mult: real * real +> real;
                  sum: seq of int -> int;
definitions

types
	Numeric = seq of Digit;
	Numeric1 = seq1 of Digit;
	
functions

  -- The minimum of two numerics.
  min: real * real +> real
  min(x,y) == if x<y then x else y;

  -- The maximum of two numerics.
  max: real * real +> real
  max(x,y) == if x>y then x else y;
  	  
  sum: seq of int -> int
	sum(ss) == fold[int]((lambda x: int, y: int & x+y),0,ss);

  -- Format a natural number as a string of digits.
  formatNat: nat +> Numeric
  formatNat(n) == if n < 10
                  then [toChar(n)]
                  else formatNat(n div 10) ^ [toChar(n mod 10)]
  measure n;

  -- Convert a numeric digit to the corresponding character.
  toChar: nat +> Digit
  toChar(n) == DIGITS(n+1)
  pre 0 <= n and n <= 9;
  --post fromChar(RESULT) = n

  -- Convert a character digit to the corresponding natural number.
  fromChar: Digit +> nat
  fromChar(c) == indexOf[Digit](c,DIGITS)-1
  post toChar(RESULT) = c;

  -- Format a natural number as a string with leading zeros up to a specified length.
  zeroPad: nat * nat1 +> Numeric
  zeroPad(n,w) == padLeft[Digit](formatNat(n),char2digit('0'),w);

  -- The following functions wrap primitives for convenience, to allow them for example to
  -- serve as function arguments.

  -- Sum of two numbers.
  add: real * real +> real
  add(m,n) == m+n;

  -- Product of two numbers.
  mult: real * real +> real
  mult(m,n) == m*n;
  
end Numeric