module TimeTestCSV
imports
    from CSV 
        functions
            freadval renamed freadval;
            flinecount renamed flinecount;  
        operations
            ferror renamed ferror;
    ,from CSVLib 
        types
            --CSVType renamed CSVType;
            CSVSettings renamed CSVSettings;
            Headers0 renamed Headers0;
            Header0 renamed Header0;
        operations
            loadCSV renamed loadCSVLib;
            --printCSV renamed printCSV;
    ,from IO 
        operations  
            printf renamed printf;
    ,from VDMUtil 
        functions
            val2seq_of_char renamed val2seq_of_char;
exports all
definitions
    types 
        String = seq of char;
        
        String1 = seq1 of char;
    values  
        files: set of nat = {1,100,500,1000,5000,10000,15000,20000,25000,30000,35000};

        CSV_SETTINGS: CSVSettings = mk_CSVSettings(true, false, nil);

        CSV_HEADERS: Headers0 = [ mk_Header0(
                    "Digit" ^ val2seq_of_char[nat1](i), 
                    <Integer>, 
                    0,
                    nil,
                    nil
                  ) 
                  | 
                  i in set {1, ..., 4}
                ] ;
    operations 

         showError: () ==> ()
        showError() ==
        (def err: String = ferror() in
            if len err <> 0 then 
                printf("CSV error %1s", [err]);
        );

        loadCSV: String1 ==> seq of ?
        loadCSV(name) ==
        (let mk_(success', lines) = flinecount(name) in
            (dcl success: bool     := success',
                line   : nat1     := 1,
                result : seq of ? := [];
                (--showError();
                while (success and line <= lines) do
                    (let mk_(s, r) = freadval[seq of ?](name, line) in
                        (--showError();
                        success := s;
                        line    := line + 1;
                        result  := result ^ [r];
                        );
                    );
                return result;
                )
            )
        );
        loadTestCSV: (nat) ==> ()
        loadTestCSV(count) == (
            if count in set files then (
                dcl filename: String1 := val2seq_of_char[nat](count) ^ ".csv";
                --@Time("CSV %2s \n", count)
                --@Warning(5000)
                dcl data: seq of ? := loadCSV("CSVs/" ^ filename);
                return;
            )
            else 
            (
                printf("Invalid file name: %1s",[count]);
            )
        );


        loadTestCSVLib1: (nat) ==> ()
        loadTestCSVLib1(count) == (
            if count in set files then (
                dcl filename: String1 := val2seq_of_char[nat](count) ^ ".csv";
                --@Time("CSVLib %2s \n", count)
                 loadCSVLib("performance/CSVs/" ^ filename, <Native>, CSV_SETTINGS, CSV_HEADERS, false);
                 --printCSV("performance/CSVs/print_" ^ filename,0);
                return;
            )
            else 
            (
                printf("Invalid file name: %1s",[count]);
            )
        );

        loadTestCSVLib2: (nat) ==> ()
        loadTestCSVLib2(count) == (
            if count in set files then (
                dcl filename: String1 := val2seq_of_char[nat](count) ^ ".csv";
                --@Time("CSVLib %2s \n", count)
                 loadCSVLib("performance/CSVs/" ^ filename, <Univocity>, CSV_SETTINGS, CSV_HEADERS, false);
                 --printCSV("performance/CSVs/print_" ^ filename,0);
                return;
            )
            else 
            (
                printf("Invalid file name: %1s",[count]);
            )
        );

end TimeTestCSV