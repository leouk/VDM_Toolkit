module Regions
exports 
    functions 
        regions[@X]: set1 of set of @X -> set1 of set of @X;
definitions 

functions 
    regions[@X]: set1 of set of @X -> set1 of set of @X
    regions(SS) == { (dinter P \ (dunion (SS \ P))) | P in set power SS & P <> {} } \ {{}}; 

    refl: ? * ? -> bool
    refl(x, y) == x = y;

values 
    A: set1 of char = {'a', 'd', 'e', 'g'};
    B: set1 of char = {'b', 'e', 'f', 'g'};
    C: set1 of char = {'c', 'd', 'f', 'g'};
    S: set1 of set of char = { A, B, C };
    R: set1 of set of char = { {'a'}, {'b'}, {'c'}, {'d'}, {'e'}, {'f'}, {'g'} }; 

traces 
    T1: refl(regions[char](S), R);

    --@doc regions are proportionate to the power set of Venn-diagram number of sets 
    --     (e.g. all non-empty regions within Venn diagram are accounted for)  
    T2: refl(card regions[char](S), (2 ** (card S)) -1);

    --@doc region slicing does not loose any element
    T3: refl(dunion S, dunion regions[char](S));  

end Regions